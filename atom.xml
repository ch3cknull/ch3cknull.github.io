<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ch3cknull.github.io</id>
    <title>ch3cknull&apos;s blog</title>
    <updated>2022-02-28T15:01:00.672Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ch3cknull.github.io"/>
    <link rel="self" href="https://ch3cknull.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://ch3cknull.github.io/images/avatar.png</logo>
    <icon>https://ch3cknull.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, ch3cknull&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[使用 vite-plugin-pwa 将自己的网页变为PWA]]></title>
        <id>https://ch3cknull.github.io/post/pwa/</id>
        <link href="https://ch3cknull.github.io/post/pwa/">
        </link>
        <updated>2022-02-28T14:08:38.000Z</updated>
        <content type="html"><![CDATA[<p>在枝网前端寻找一个能够将站点PWA化的方案时，找到了 <a href="https://github.com/antfu/vite-plugin-pwa">vite-plugin-pwa</a></p>
<h1 id="安装">安装</h1>
<pre><code class="language-bash">npm i -D vite-plugin-pwa
</code></pre>
<h1 id="配置">配置</h1>
<pre><code class="language-ts">// vite.config.ts
import { defineConfig } from 'vite'
// import other plugins
import { VitePWA } from 'vite-plugin-pwa'

export default defineConfig({
 plugins: [
   //   other plugins
   VitePWA({})
 ],
})
</code></pre>
<p>VitePWA接受一个 <code>Partial&lt;VitePWAOptions&gt;</code> , 其中，必须配置的属性有</p>
<ul>
<li>base</li>
<li>workbox</li>
<li>manifest</li>
</ul>
<p>这里是一个样例（使用枝网的配置）</p>
<pre><code class="language-ts">VitePWA({
      mode: 'development',
      base: '/',
      registerType: process.env.CLAIMS === 'true' ? 'autoUpdate' : undefined,
      includeAssets: ['favicon.svg', 'robots.txt', 'apple-touch-icon.png'],
      //   配置 worker box 用于离线缓存
      workbox: {
        runtimeCaching: [
          {
            // 根据正则表达式进行缓存，如果你喜欢 也可以使用/.*/i
            urlPattern: /^https:\/\/asoulcnki.asia\/v1\/api\/ranking\/.*/i,
            handler: 'NetworkFirst',
            options: {
              cacheName: 'asoulcnki-api-cache',
              expiration: {
                maxEntries: 10,
                maxAgeSeconds: 60 * 60 * 1.5,
              },
              cacheableResponse: {
                statuses: [0, 200],
              },
            },
          }
        ],
      },
      manifest: {
        name: '枝网查重',
        short_name: '枝网查重',
        theme_color: '#60A5FA',  // 主题颜色，和 index.html 中的保持一致
        background_color: '#FFFFFF',
        description: 'A-Soul 小作文查重',
        start_url: '/',
        lang: 'zh-Hans-CN',
        // PWA 要求至少有一张 192x192 和 512x512 的图片
        icons: [
          {
            src: 'pwa-192x192.png',
            sizes: '192x192',
            type: 'image/png',
          },
          {
            src: 'pwa-512x512.png',
            sizes: '512x512',
            type: 'image/png',
          },
          {
            src: 'pwa-512x512.png',
            sizes: '512x512',
            type: 'image/png',
            purpose: 'any maskable',
          },
        ],
      },
    }),
</code></pre>
<p>在 index.html 的header 添加以下内容</p>
<pre><code class="language-html">&lt;link rel=&quot;apple-touch-icon&quot; href=&quot;/pwa-192x192.png&quot; /&gt;
&lt;link rel=&quot;mask-icon&quot; href=&quot;/favicon.svg&quot; color=&quot;#FFFFFF&quot; /&gt;
&lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#FFFFFF&quot; /&gt;
&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;
&lt;!-- theme-color 和配置中的保持一致即可 --&gt;
&lt;meta name=&quot;theme-color&quot; content=&quot;#60a5fa&quot; /&gt;
</code></pre>
<p>之后运行 <code>npm run build</code> 或者你自己的构建命令<br>
vite-plugin-pwa 会自动为你生成对应的 manifest 和 Service Worker</p>
<figure data-type="image" tabindex="1"><img src="https://ch3cknull.github.io/post-images/1633273431956.png" alt="" loading="lazy"></figure>
<p>不过到这里还是有些问题，sw.js 不会自己注册</p>
<p>需要向 index.html 添加如下内容</p>
<pre><code class="language-html">&lt;script src=&quot;/registerSW.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h1 id="service-worker-的更新">Service Worker 的更新</h1>
<p>这里使用的是最简单的做法，浏览器在每次启动时，会自动对比新的 sw.js 和本地的 sw.js, 如果存在差异，就进行更新</p>
<p>注意，对于sw.js，应该尽量避免通过修改文件名的方式来更新，因为两个不同版本的Service Woeker可能存在冲突问题</p>
<p>如果使用了CDN的话，需要将 sw.js 设置为不缓存</p>
<p>另外，PWA只有在 localhost 和 https 环境下可用<br>
其他细节的地方后续再补充，先摆烂了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[对 GitHub Actions 和 Octokit 的探索]]></title>
        <id>https://ch3cknull.github.io/post/octokit/</id>
        <link href="https://ch3cknull.github.io/post/octokit/">
        </link>
        <updated>2021-12-22T12:29:50.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p><del>众所周知，懒是人类进步的第一生产力</del><br>
重复工作交给机器做比较方便，这样自己重复工作的时间就能做一些更有意义的事情了😈</p>
<p>对 GitHub Actions 还不了解的朋友可以去看阮一峰老师的文章，<a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">链接</a></p>
<p><a href="https://github.com/octokit">Octokit</a> 是 GitHub 官方推出的一套 SDK，用于调用 GitHub 的各种API，用这个东西我们可以做很多有趣的东西</p>
<ul>
<li>自动提 Issue，或者给 Issue 评论</li>
<li>Issue自动转换成 PR，可以参见 type-challenge 的做法，<a href="https://github.com/type-challenges/type-challenges">链接</a></li>
<li><del>批量点Star<del></li>
</ul>
<h3 id="广告">广告</h3>
<p>这个项目主要是为催学社的小伙伴准备的，欢迎大家加入催学社一起来卷啊</p>
<p>想加入催学<del>卷</del>社的小伙伴，可以联系催学社的发起者 崔哥 @cuixiaorui, vx: cuixr1314</p>
<p>同时，崔哥也是 <a href="https://github.com/cuixiaorui/mini-vue">mini-vue</a> 的作者，实现一个简化版 Vue3，来帮助大家理解 Vue3 源码，也欢迎大家给 mini-vue 点个 star</p>
<h2 id="找需求">找需求</h2>
<p>众所周知，之前大崔哥 <a href="https://github.com/cuixiaorui/">@cuixiaorui</a> 有一个 study-every-day 的 repo，打卡每日计划，那么，我们能不能把提交每日计划的这个过程自动化呢？<br>
大致的需求就是：</p>
<ul>
<li>用 Markdown 写一个模板</li>
<li>每天定时把上面的模板内容评论到当天 每日任务的 Issue</li>
<li>如果在自动执行之前，已经评论过，就不再发送了</li>
<li>如果没有找到这一天的 Issue，也跳过执行</li>
</ul>
<p>这样我们就可以直接去改生成好的模板了，重复劳动减少了（虽然还是要手动去改）</p>
<p><strong>当然可以！</strong></p>
<p>于是就有了下面这个东西 <a href="https://github.com/ch3cknull/auto-issue-comment">ch3cknull/auto-issue-comment</a></p>
<h2 id="用法">用法</h2>
<ol start="0">
<li>fork本项目</li>
<li>修改 <code>template.md</code> 为自己适合的模板</li>
<li>申请一个 token</li>
<li>在 repo 的 <code>Settings</code> 的 <code>Secrets</code> 里添加新的 Secret
<ol>
<li>点击右上角 <code>New repository secret</code></li>
<li>Name 为 <code>GH_TOKEN</code></li>
<li>Value 为你申请到的 key</li>
</ol>
</li>
</ol>
<h2 id="怎么做">怎么做？</h2>
<p>其实很简单，我们简单做一下任务拆分</p>
<ol>
<li>从repo拿到所有的 Issue，过滤掉所有的 PR （因为PR也是特殊的Issue）</li>
<li>拿到当天对应的Issue</li>
<li>查看当天是不是已经发过了</li>
<li>发送模板评论</li>
</ol>
<p>拆分任务之后，就该来具体实现了</p>
<h3 id="具体实现">具体实现</h3>
<p>先熟悉一下 Octokit 的用法，在使用之前先安装一下，我推荐使用 pnpm 来管理包， 因为速度快，而且省空间</p>
<pre><code class="language-bash">npm i -g pnpm
pnpm i octokit
</code></pre>
<p>简单试用一下，这里的 token 是你需要自己在 GitHub 申请的，申请 token 的流程我会放在文章的最后，需要先验证 token 才能使用下文的 API</p>
<pre><code class="language-ts">import { Octokit } from 'octokit'

const octokit = new Octokit({ auth: '这里填写你的token' })
</code></pre>
<p>像我们上面所说的这些需求，比如：</p>
<ul>
<li>查看某个项目所有的Issue</li>
<li>查看某个Issue所有的评论</li>
<li>给指定的Issue发送评论</li>
<li><del>给其他项目疯狂点Star</del></li>
</ul>
<p>都是有对应的API用的</p>
<p>这里我们会用到以下几个API</p>
<pre><code class="language-ts">const { listForRepo, createComment, listComments } = octokit.rest.issues
const { getAuthenticated } = octokit.rest.users
</code></pre>
<p>这几个API能用来</p>
<ul>
<li>列出指定 repo 的所有 Issue</li>
<li>在指定的 Issue 添加一条评论，这是我们需要的主要功能</li>
<li>列出指定 Issue 所有的评论</li>
<li>获取当前登陆用户的信息，这里用来和评论匹配，确定之前有没有在这个Issue发过言</li>
</ul>
<p>那么，开搞！</p>
<p>本地的话，可以先小步快跑，把token硬编码在里面，等实现功能之后我们再考虑重构</p>
<p>大概就是下面这个思路</p>
<ol>
<li>先用 <code>listForRepo</code> 根据指定的 owner 和 repo 信息</li>
<li>根据每日计划Issue的标题格式，筛选出当天需要评论的 Issue（但是如果用 Issue 的创建时间应该更合理？设计之初没有想到这点）</li>
<li>用 <code>listComments</code>  查看这个 Issue 的所有评论</li>
<li>判断今天是否评论过（用 <code>getAuthenticated</code> 获取登陆者的用户名来和所有评论匹配）</li>
<li>如果没有评论过，就发送评论（用 fs 读取模板 md，然后用 <code>createComment</code> 发送 ）</li>
</ol>
<h3 id="和-github-actions-结合">和 GitHub Actions 结合</h3>
<p>和 GitHub Actions 结合是需要做一些改动的，就比如 token 不能暴露在外，肯定不能硬编码在代码中（但我还是犯了这种错误，只需要重置一下，让旧 token 失效就行了），当然，GitHub也提供了这种存放秘密值的地方，配置的话，可以参见上面的用法。</p>
<p>我们需要做的改变是，从环境变量中读取 token，这里我们指定的环境变量名是 <code>GH_TOKEN</code>，这样我们就能在代码中直接使用这个环境变量了。</p>
<pre><code class="language-ts">const { GH_TOKEN } = process.env
</code></pre>
<p>另外，配置执行的 yml 也是一件比较麻烦的事<del>（我常常因为自己不会配置和大佬格格不入）</del></p>
<p>按理来说，作为 node 应用，可以直接在官方示例上做修改就行了，但是配置过程还是充满坎坷的，不是漏了分号就是缩进错误，由于 GitHub 提供的机器时区和我们不同，需要额外修改一下，这里可以参考项目的README</p>
<p>这里的 push 是我为了方便观察有没有成功运行才加的，正常情况只保留下面的 schedule 就行了</p>
<pre><code class="language-yml">name: auto add template comment to cuixiaorui/study-every-day issue

on:
  push:
    branches:
      - master
  schedule:
      - cron: '30 0 * * *'

jobs:
  add-comment:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - run: npm install
      - run: tsc
      - run: node dist/index.js
</code></pre>
<p>至此，终于完成了，欢迎大家 fork 和 star</p>
<h2 id="附录">附录</h2>
<h3 id="申请-github-的-token">申请 GitHub 的 token</h3>
<ol>
<li>
<p>打开你的 GitHub 的 Setting 的 Personal access tokens，点击<a href="https://github.com/settings/tokens">这里</a>快速跳转</p>
</li>
<li>
<p>点击右上角 <code>generate new token</code></p>
</li>
<li>
<p>填写 token 的名称，然后选择 token 对应的权限</p>
</li>
<li>
<p>点击确定，并且复制 token</p>
<p>需要注意的是，如果没复制，退出去就看不到当前 token 了，只能重置<br>
重置的时候，之前的 token 会失效，使用之前 token 的应用需要配置新 token</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenResty 安装]]></title>
        <id>https://ch3cknull.github.io/post/openresty_install/</id>
        <link href="https://ch3cknull.github.io/post/openresty_install/">
        </link>
        <updated>2021-10-05T04:22:25.000Z</updated>
        <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>地址</th>
<th><a href="https://openresty.org/download/openresty-1.19.3.2.tar.gz">https://openresty.org/download/openresty-1.19.3.2.tar.gz</a></th>
</tr>
</thead>
<tbody>
<tr>
<td>GitHub</td>
<td><a href="https://github.com/openresty/openresty">https://github.com/openresty/openresty</a></td>
</tr>
<tr>
<td>配置文件位置</td>
<td>/usr/local/openresty/nginx/conf/nginx.conf</td>
</tr>
<tr>
<td>日志名称</td>
<td>access.log access-2021-08-15.log error.log</td>
</tr>
</tbody>
</table>
<h2 id="安装">安装</h2>
<p>本次安装同时配置 ssl http2 和 brotli压缩算法<br />需要额外下载 openssl库 和 brotli算法 的支持库</p>
<h3 id="下载源码">下载源码</h3>
<pre><code class="language-bash">wget https://openresty.org/download/openresty-1.19.3.2.tar.gz
</code></pre>
<h3 id="安装依赖">安装依赖</h3>
<p>对于不同发行版，安装部分依赖的方式不太相同</p>
<h4 id="debian">Debian</h4>
<pre><code class="language-bash">apt-get install libpcre3-dev libssl-dev perl make build-essential curl
</code></pre>
<h4 id="redhat">RedHat</h4>
<pre><code class="language-bash">yum install pcre-devel openssl-devel gcc curl
</code></pre>
<h4 id=""></h4>
<p>下面是共同的部分</p>
<h4 id="配置-openssl-和-brotli">配置 openssl 和 brotli</h4>
<pre><code class="language-bash">wget https://www.openssl.org/source/openssl-1.0.2l.tar.gz
tar -xzvf openssl-1.0.2l.tar.gz
</code></pre>
<p>得到 <code>openssl-1.0.2l/</code><br /><br>
<br />对于brotli，分别 clone 以下仓库</p>
<ul>
<li>ngx_http_trim_filter_module(用于去掉响应多余空格)</li>
<li>ngx_brotli(nginx的br模块)</li>
<li>brotli(br算法)</li>
</ul>
<p>其中，brotli要配置在 <code>ngx_brotli/deps</code> 下，需要先删除存在的brotli文件夹<br />另外，<strong>只有当使用https时</strong>，客户端才会发送Accept-Encoding:br，在不支持https的环境下建议使用gzip</p>
<pre><code class="language-bash">git clone git@github.com:taoyuanyuan/ngx_http_trim_filter_module.git
git clone git@github.com:google/ngx_brotli.git
cd ngx_brotli/deps
rm -rf ./brotli
git clone git@github.com:google/brotli.git
</code></pre>
<p>现在得到了三个文件夹</p>
<pre><code class="language-bash">openssl-1.0.2l/
ngx_brotli/
ngx_http_trim_filter_module/
</code></pre>
<p>将这三个文件夹转移到/usr/local/src</p>
<pre><code class="language-bash">cp -R openssl-1.0.2l/ ngx_brotli/ ngx_http_trim_filter_module/ /usr/local/src
</code></pre>
<h3 id="安装-2">安装</h3>
<p>切换到openresty目录下，执行以下configure以配置</p>
<pre><code class="language-bash">cd openresty-1.19.3.2
./configure   --add-module=/usr/local/src/ngx_brotli \ 
		--with-http_v2_module \
		--with-openssl=/usr/local/src/openssl-1.0.2l \ 
		--add-module=/usr/local/src/ngx_http_trim_filter_module
</code></pre>
<p>无误后执行</p>
<pre><code class="language-bash">make &amp;&amp; make install
</code></pre>
<p>默认安装位置在<code>/usr/local/openresty</code>下<br />最好在配置文件中中添加openresty，我的做法是，在.zshrc中插入一条alias，如下文所示</p>
<pre><code class="language-bash">alias openresty=&quot;/usr/local/openresty/bin/openresty&quot;
</code></pre>
<h2 id="配置">配置</h2>
<p>大部分等同于nginx配置</p>
<h3 id="开启压缩">开启压缩</h3>
<p>注意：gzip 和 br 是可以同时开启的，在br算法不生效时使用gzip<br />在http块中配置</p>
<pre><code class="language-bash">#gzip config
gzip on;
gzip_min_length 5k;
gzip_buffers 4 32k;
gzip_comp_level 5;
gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml text/javascript application/javascript;

# brotli config
brotli on;
brotli_static on; # 将静态文件预编译成br文件，条件满足直接使用
brotli_comp_level 6;
brotli_buffers 16 8k;
brotli_min_length 5k;
brotli_types text/plain text/css application/json application/x-javascript text/xml application/xml text/javascript application/javascript;
</code></pre>
<h3 id="开启限速">开启限速</h3>
<h4 id="在http块中配置">在http块中配置</h4>
<p><code>$binary_remote_addr</code> 表示按照ip地址限速 <br />zone=空间名称:空间大小<br />rate=请求次数/时间 可以设置分钟和小时</p>
<pre><code class="language-bash"># limit_req_zone config
limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
limit_req_zone $binary_remote_addr zone=static:10m rate=60r/s;
limit_req_status 500; # when over max req num, return 500
</code></pre>
<h4 id="在location配置">在location配置</h4>
<p>zone为对应的空间名称</p>
<pre><code class="language-bash">location /v1 {
    limit_req zone=api burst=5 nodelay; # 5r/s per ip
}
</code></pre>
<h3 id="日志分割功能">日志分割功能</h3>
<p>在server块中添加以下内容，$time_iso8601为内置变量，可以直接使用</p>
<pre><code class="language-bash">if ( $time_iso8601 ~ &quot;^(\d{4}-\d{2}-\d{2})&quot;) {
    set $time $1;
}

access_log  logs/access.$time.log;
error_log logs/error.log;
</code></pre>
<h2 id="启动">启动</h2>
<p>由于安装环节已经配置了openresty的环境变量，所以这里以openresty别名举例</p>
<h3 id="启动-2">启动</h3>
<pre><code class="language-bash"># 启动 携带-c参数可指定配置文件位置
openresty
# 测试配置文件是否正常
openresty -t
# 停止
openresty -s stop
# 重载配置文件 适用于修改配置文件后重载openresty
openresty -s reload
# 重新打开配置文件 用于使用脚本分割日志后，重新创建日志文件
openresty -s reopen
</code></pre>
<h3 id="基础配置">基础配置</h3>
<pre><code class="language-bash">nginx path prefix: &quot;/usr/local/openresty/nginx&quot;
nginx binary file: &quot;/usr/local/openresty/nginx/sbin/nginx&quot;
nginx modules path: &quot;/usr/local/openresty/nginx/modules&quot;
nginx configuration prefix: &quot;/usr/local/openresty/nginx/conf&quot;
nginx configuration file: &quot;/usr/local/openresty/nginx/conf/nginx.conf&quot;
nginx pid file: &quot;/usr/local/openresty/nginx/logs/nginx.pid&quot;
nginx error log file: &quot;/usr/local/openresty/nginx/logs/error.log&quot;
nginx http access log file: &quot;/usr/local/openresty/nginx/logs/access.log&quot;
nginx http client request body temporary files: &quot;client_body_temp&quot;
nginx http proxy temporary files: &quot;proxy_temp&quot;
nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;
nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;
nginx http scgi temporary files: &quot;scgi_temp&quot;
</code></pre>
<h2 id="其他">其他</h2>
<p>OpenResty 的优势在于能直接使用 Lua 脚本对请求和响应做修改和限制，后续会更新 Lua脚本 相关内容</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于我]]></title>
        <id>https://ch3cknull.github.io/post/about/</id>
        <link href="https://ch3cknull.github.io/post/about/">
        </link>
        <updated>2021-10-03T10:34:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="ch3cknulls-profile">🎉 ch3cknull's profile</h3>
<p>I'm ch3cknull.<br>
Now Interested in FrontEnd and OpenResty.<br>
<img align="right" src="https://github-readme-stats.vercel.app/api?username=ch3cknull&show_icons=true"></p>
<h3 id="language">🧰Language</h3>
<img class="icon" src="https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/javascript/javascript.png" alt="javascript" />
<img class="icon" src="https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/typescript/typescript.png" alt="typescript" />
<img class="icon" src="https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/css/css.png" alt="css" />
<img class="icon" src="https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/html/html.png" alt="html" />
<img class="icon" src="https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/python/python.png" alt="python" />
<img class="icon" src="https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/lua/lua.png" alt="lua" />
<h3 id="frameworks-tools">🔧FrameWorks &amp;&amp; Tools</h3>
<img class="icon" src="https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/visual-studio-code/visual-studio-code.png" alt="visual-studio-code" />
<img class="icon" src="https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/vue/vue.png" alt="vue" />
<img class="icon" src="https://vitejs.dev/logo.svg" alt="vite" />
<img class="icon" src="https://windicss.org/assets/logo.svg" alt="windicss" />
<img class="icon" src="https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/git/git.png" alt="git" />
<img class="icon" src="https://openresty.org/images/logo.png" alt="openresty" />
<h3 id="i-working-on-recently">👨‍🏭I Working On Recently</h3>
<h4 id="asoulcnkifrontendv3">ASoulCnkiFrontEndV3</h4>
<p>FrontEnd for ASoulCnki, used Vue3, TS, WindiCSS, and ElementPlus<br>
<a href="https://github.com/ASoulCnki/ASoulCnkiFrontEndV3">https://github.com/ASoulCnki/ASoulCnkiFrontEndV3</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World!]]></title>
        <id>https://ch3cknull.github.io/post/hello-world/</id>
        <link href="https://ch3cknull.github.io/post/hello-world/">
        </link>
        <updated>2021-10-03T10:09:36.000Z</updated>
        <content type="html"><![CDATA[<p>Hello World!</p>
]]></content>
    </entry>
</feed>